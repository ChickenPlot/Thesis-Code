---
title: "GWAS Statistics"
format: html
editor: visual
---

```{r, setup, include=FALSE}

filespath = 'C:/Users/Simo/genomics/damianoRNAseq-20042023/output/GWAS'

knitr::opts_knit$set(root.dir = filespath)

```

```{r}

library(tidyverse)
library(ggrepel)
library(GGally)

# library(edgeR)
# library(IHW)
library(GenomicRanges)

library(patchwork)
library(ggbreak)
library(viridis)
library(ComplexHeatmap)
library(qqman)

library(gprofiler2)

```

```{r}
#|output: false

gwas_areb3 <- read_csv('GWAS_summary/areb3_summary_stats.csv', 
                       #header = T, 
                       skip = 8)


gwas_eel <- read_csv('GWAS_summary/eel_summary_stats.csv',
                     #header = T,
                     skip = 8)


gwas_fd <- read_csv('GWAS_summary/fd_summary_stats.csv', 
                    #header = T,
                    skip = 8)


gwas_fdp <- read_csv('GWAS_summary/fdp_summary_stats.csv', 
                     #header = T, 
                     skip = 8)
```

```{r}

#ihw_areb <- ihw(P.Value ~ MAF, data = gwas_areb3, alpha = 0.1)
#ihw_eel <- ihw(P.Value ~ MAF, data = gwas_eel, alpha = 0.1)
#ihw_fd <- ihw(P.Value ~ MAF, data = gwas_fd, alpha = 0.1)
#ihw_fdp <- ihw(P.Value ~ MAF, data = gwas_fdp, alpha = 0.1)

#plot(ihw_areb)
#plot(ihw_eel)
#plot(ihw_fd)
#plot(ihw_fdp)
```

P.value distribution for each experiment

```{r}

areb_clean <- gwas_areb3[which(gwas_areb3$`P-Value`< 0.2),]


length(which(gwas_areb3$`Benjamini-Hochberg-P-Value` <= 0.2)) # 76 datapoints


data.frame(CHR = areb_clean$`>CHR`,
           Position = areb_clean$Positions,
           phred_Score = -log10(areb_clean$`Benjamini-Hochberg-P-Value` ),
           adj_Pvalue = areb_clean$`Benjamini-Hochberg-P-Value`) %>%

ggplot(., aes(x=CHR,
              y=phred_Score, #adj_Pvalue,
              fill=CHR))+
  geom_boxplot() + 
  scale_fill_viridis_d(option = 'plasma', alpha = .5) +
  ggtitle('AREB3 distribution of P.val <=.2 ') + 
  geom_hline(yintercept = -log10(0.1) )

```

```{r}

eel_clean <- gwas_eel[which(gwas_eel$`P-Value`< 0.2),]


length(which(gwas_eel$`Benjamini-Hochberg-P-Value` <= 0.2)) #  datapoints
length(which(gwas_eel$`Benjamini-Hochberg-P-Value` > 0.2))


data.frame(CHR = eel_clean$`>CHR`,
           Position = eel_clean$Positions,
           phred = -log10(eel_clean$`Benjamini-Hochberg-P-Value` ),
           adj_Pvalue = eel_clean$`Benjamini-Hochberg-P-Value`) %>%

ggplot(., aes(x=CHR,
              y=phred,
              fill=CHR))+
  geom_boxplot() + 
  scale_fill_viridis_d(option = 'plasma', alpha = .5) +
  ggtitle('EEL distribution of P.val <=.2 ') + 
  geom_hline(yintercept = -log10(0.1) )
```

```{r}

fd_clean <- gwas_fd[which(gwas_fd$`P-Value`<= 0.2),]


length(which(gwas_fd$`Benjamini-Hochberg-P-Value` <= 0.2)) #  datapoints
length(which(gwas_fd$`Benjamini-Hochberg-P-Value` > 0.2))


data.frame(CHR = fd_clean$`>CHR`,
           Position = fd_clean$Positions,
           log_Pvalue = -log10(fd_clean$`Benjamini-Hochberg-P-Value` ),
           adj_Pvalue = fd_clean$`Benjamini-Hochberg-P-Value`) %>%

ggplot(., aes(x=CHR,
              y=log_Pvalue,
              fill=CHR))+
  geom_boxplot() + 
  scale_fill_viridis_d(option = 'plasma', alpha = .5) +
  ggtitle('FD distribution of P.val <=.2 ')+ 
  geom_hline(yintercept = -log10(0.1) )

```

```{r}
fdp_clean <- gwas_fdp[which(gwas_fdp$`P-Value`<= 0.2),]


length(which(gwas_fdp$`Benjamini-Hochberg-P-Value` <= 0.2)) #  datapoints
length(which(gwas_fdp$`Benjamini-Hochberg-P-Value` > 0.2))


data.frame(CHR = fdp_clean$`>CHR`,
           Position = fdp_clean$Positions,
           log_Pvalue = -log10(fdp_clean$`Benjamini-Hochberg-P-Value` ),
           adj_Pvalue = fdp_clean$`Benjamini-Hochberg-P-Value`) %>%

ggplot(., aes(x=CHR,
              y=log_Pvalue,
              fill=CHR))+
  geom_boxplot() + 
  scale_fill_viridis_d(option = 'plasma', alpha = .5) +
  ggtitle('FDP distribution of P.val <=.2 ')+ 
  geom_hline(yintercept = (-log10(0.1)) )

  #geom_hline(yintercept = .1 )
```

```{r}
#manhattan

#areb
areb_clean$CHR_numeric <- lapply(strsplit(areb_clean$`>CHR`, split = 'Chr'), 
                                FUN = '[', 2 ) %>% unlist %>% as.integer()
manhattan(areb_clean, 
          chr="CHR_numeric",
          bp="Positions", 
          snp="SNP-Hash", 
          p="Benjamini-Hochberg-P-Value",
          suggestiveline = -log10(0.1),
          genomewideline = -log10(0.05))





#eel
eel_clean$CHR_numeric <- lapply(strsplit(eel_clean$`>CHR`, split = 'Chr'), 
                                FUN = '[', 2 ) %>% unlist %>% as.integer()
manhattan(eel_clean, 
          chr="CHR_numeric",
          bp="Positions", 
          snp="SNP-Hash", 
          p="Benjamini-Hochberg-P-Value",
          suggestiveline = -log10(0.1),
          genomewideline = -log10(0.05))

#fd
fd_clean$CHR_numeric <- lapply(strsplit(fd_clean$`>CHR`, split = 'Chr'), 
                                FUN = '[', 2 ) %>% unlist %>% as.integer()
manhattan(fd_clean, 
          chr="CHR_numeric",
          bp="Positions", 
          snp="SNP-Hash", 
          p="Benjamini-Hochberg-P-Value",
          suggestiveline = -log10(0.1),
          genomewideline = -log10(0.05))


#fdp
fdp_clean$CHR_numeric <- lapply(strsplit(fdp_clean$`>CHR`, split = 'Chr'), 
                                FUN = '[', 2 ) %>% unlist %>% as.integer()
manhattan(fdp_clean, 
          chr="CHR_numeric",
          bp="Positions", 
          snp="SNP-Hash", 
          p="Benjamini-Hochberg-P-Value",
          suggestiveline = -log10(0.1),
          genomewideline = -log10(0.05))


```

```{r}

areb_clean <- areb_clean[,c(1,2,3,6, 12,13)]
areb_clean$Gene <- rep('AREB_3', length(areb_clean[,1]))

eel_clean <- eel_clean[,c(1,2,3,6, 12,13)]
eel_clean$Gene <- rep('EEL', length(eel_clean[,1]))

fd_clean <- fd_clean[,c(1,2,3,6, 12,13)]
fd_clean$Gene <- rep('FD', length(fd_clean[,1]))

fdp_clean <- fdp_clean[,c(1,2,3,6, 12,13)]
fdp_clean$Gene <- rep('FDP', length(fdp_clean[,1]))

```

```{r}

dat <- rbind(areb_clean,
             eel_clean,
             fd_clean,
             fdp_clean) 

colnames(dat) <- c('CHR','Position', 'p.value', 'FDR', 'MAF', 'SNP_Hash', 'Gene')
```

# LOAD GFF

```{r}
GFF <- read.table("TAIR10_GFF3_genes.gff.txt",
                  sep = "\t", header = F)

#GFF <- GFF[,c(1,3:5,9)]
#colnames(GFF) <- c("CHR", "Type", "Start", "End", "Annotations")


GFF_restricted <- GFF[which(GFF$V3 != "chromosome"),]


```

```{r}
dat[dat$FDR < 0.1,] -> snp_sub
```

```{r}

ld_range <- 10000
# EEL CH2
gff_ch2 <- GFF_restricted[GFF_restricted$V1 == "Chr2",]
snp_ch2 <- snp_sub[snp_sub$CHR == "Chr2",]

IR_gff_ch2 <- IRanges(start = gff_ch2$V4, 
                      end = gff_ch2$V5, 
                      names =gff_ch2$V1)

mcols(IR_gff_ch2) <- gff_ch2$V9
IR_gff_ch2.it <- NCList(IR_gff_ch2)

IR_snp_ch2 <- IRanges(start = snp_ch2$Position-ld_range, 
                      end = snp_ch2$Position+ld_range, 
                      names = snp_ch2$CHR)

findOverlaps(IR_snp_ch2, IR_gff_ch2.it) -> overlaps
IR_snp_ch2[queryHits(overlaps)] -> snp_pos_ch2
IR_gff_ch2[subjectHits(overlaps)] -> gff_pos_ch2 #%>% data.frame
IR_gff_ch2.it[subjectHits(overlaps)]

data.frame(gff_pos_ch2) -> gff_pos_ch2.df
data.frame(snp_pos_ch2) -> snp_pos_ch2.df






# AREB CH1
gff_ch1 <- GFF_restricted[GFF_restricted$V1 == "Chr1",]
snp_ch1 <- snp_sub[snp_sub$CHR == "Chr1",]

IR_gff_ch1 <- IRanges(start = gff_ch1$V4, 
                      end = gff_ch1$V5, 
                      names =gff_ch1$V1)
mcols(IR_gff_ch1) <- gff_ch1$V9
IR_gff_ch1.it <- NCList(IR_gff_ch1)

IR_snp_ch1 <- IRanges(start = snp_ch1$Position-ld_range, 
                      end = snp_ch1$Position+ld_range, 
                      names = snp_ch1$CHR)

findOverlaps(IR_snp_ch1, IR_gff_ch1.it) -> overlaps
IR_snp_ch1[queryHits(overlaps)] -> snp_pos_ch1
IR_gff_ch1[subjectHits(overlaps)] -> gff_pos_ch1 #%>% data.frame
IR_gff_ch1.it[subjectHits(overlaps)]

data.frame(gff_pos_ch1) -> gff_pos_ch1.df
data.frame(snp_pos_ch1) -> snp_pos_ch1.df




# AREB CH5
gff_ch5 <- GFF_restricted[GFF_restricted$V1 == "Chr5",]
snp_ch5 <- snp_sub[snp_sub$CHR == "Chr5",]

IR_gff_ch5 <- IRanges(start = gff_ch5$V4, 
                      end = gff_ch5$V5, 
                      names =gff_ch5$V1)

mcols(IR_gff_ch5) <- gff_ch5$V9
IR_gff_ch5.it <- NCList(IR_gff_ch5)

IR_snp_ch5 <- IRanges(start = snp_ch5$Position-ld_range, 
                      end = snp_ch5$Position+ld_range, 
                      names = snp_ch5$CHR)

findOverlaps(IR_snp_ch5, IR_gff_ch5.it) -> overlaps
IR_snp_ch5[queryHits(overlaps)] -> snp_pos_ch5
IR_gff_ch5[subjectHits(overlaps)] -> gff_pos_ch5 #%>% data.frame
IR_gff_ch5.it[subjectHits(overlaps)]

data.frame(gff_pos_ch5) -> gff_pos_ch5.df
data.frame(snp_pos_ch5) -> snp_pos_ch5.df





```

```{r}
#library(DescTools)
# extract and isolate annots


# CH2 GENES
gff_pos_ch2.df$X %>% 
  #unique %>% 
  strsplit(., split = "=") %>%
  unlist %>%
  strsplit(., split = ";")  %>%
  unlist %>%
  strsplit(., split = "-")  %>%
  unlist %>% 
  strsplit(., split = ",")  %>%
  unlist %>%
  unique %>% 
  grep("AT",., value = T) -> genes_ch2 #%>% data.frame()



# CH1 
gff_pos_ch1.df$X %>% 
  #unique %>% 
  strsplit(., split = "=") %>%
  unlist %>%
  strsplit(., split = ";")  %>%
  unlist %>%
  strsplit(., split = "-")  %>%
  unlist %>%
  strsplit(., split = ",")  %>%
  unlist %>%
  unique %>% 
  grep("AT",., value = T)  -> genes_ch1


# CH5
gff_pos_ch5.df$X %>% 
  #unique %>% 
  strsplit(., split = "=") %>%
  unlist %>%
  strsplit(., split = ";")  %>%
  unlist %>%
  strsplit(., split = "-")  %>%
  unlist %>%
  strsplit(., split = ",")  %>%
  unlist %>%
  unique %>% 
  grep("AT",., value = T)  -> genes_ch5
  
```

```{r}
lg <- append(genes_ch1, c(genes_ch2, genes_ch5))# %>% data.frame()
append(genes_ch1, c(genes_ch2, genes_ch5)) %>% data.frame()
```

FOCUS ON EEL SNPS

```{r}

snps1 <- read.csv("eel_snps/Chr2_17133393")
snps1$Position <- rep("17133393",665)

snps2 <- read.csv("eel_snps/Chr2_17133973")
snps2$Position <- rep("17133973",665)

snps3 <- read.csv("eel_snps/Chr2_17134033")
snps3$Position <- rep("17134033",665)

snps4 <- read.csv("eel_snps/Chr2_17134094")
snps4$Position <- rep("17134094",665)


```

```{r}

eel_focal_snps <- rbind(snps1, snps2, snps3, snps4)

eel_focal_snps$Allele <- factor(eel_focal_snps$Allele)
eel_focal_snps$Position <- factor(eel_focal_snps$Position, levels =c("17133393","17133973","17134033","17134094"))
```

```{r}

eel_focal_snps
```

```{r}

ggplot(eel_focal_snps, aes(x = 'Allele', 
                           y = Phenotype, 
                           fill = Allele))+
  geom_boxplot()+
  theme_classic()+
  facet_wrap(~Position)



```

```{r}
# now same plot but with allelic frequencies
eel_focal_snps %>% count(Allele, Position) %>% 
  ggplot(., aes(x = 'Allele', 
                y = n, 
                fill = Allele))+
  geom_bar(stat = 'identity', position = "dodge", color = 'black')+
  theme_classic()+
  facet_wrap(~Position)+
  ggtitle('Allelic frequencies for each position')

# can clearly see the major and minor alleles
```

```{r}

read.csv("phenotypes/1001access.csv") -> ath_1001access

ath_1001access <- ath_1001access[,c(1:5)]


#table(is.na(ath_1001access))
#which(is.na(ath_1001access))

#ath_1001access[which(is.na(ath_1001access)),]

#table(complete.cases(ath_1001access))
```

```{r}

table(snps1$SampleID %in% snps2$SampleID)
table(snps1$SampleID %in% snps3$SampleID)
table(snps1$SampleID %in% snps4$SampleID)
table(snps2$SampleID %in% snps3$SampleID)
table(snps2$SampleID %in% snps4$SampleID)
table(snps2$SampleID %in% snps3$SampleID)
# alr don't even need to join
```

```{r}
# sorting for scrupolo
snps1[order(snps1$SampleID, decreasing = F),] -> snps1
snps2[order(snps2$SampleID, decreasing = F),] -> snps2
snps3[order(snps3$SampleID, decreasing = F),] -> snps3
snps4[order(snps4$SampleID, decreasing = F),] -> snps4

```

```{r}

data.frame(SampleID = snps1$SampleID, 
           Allele_17133393 = snps1$Allele,
           Allele_17133973 = snps2$Allele,
           Allele_17134033 = snps3$Allele,
           Allele_17134094 = snps4$Allele,
           Phenotype = snps1$Phenotype) %>% 
  mutate(., Haplotype = paste0(Allele_17133393,                   
                               Allele_17133973,                     
                               Allele_17134033,
                               Allele_17134094)) -> eel_haplos
```

```{r}
left_join(eel_haplos,ath_1001access, by = join_by(SampleID == pk)) -> eel_complete
eel_complete <- eel_complete[complete.cases(eel_complete),]
```

```{r}
#write.csv(eel_complete, 'EEL_SNP_Haplos.csv')
```

```{r}

# looks we have just 2 aplotypes

eel_complete %>% count(Haplotype) %>% 
  ggplot(., aes(x = Haplotype, 
                y = n, 
                fill = Haplotype))+
  geom_bar(stat = 'identity', color = 'black')+
  theme_classic()
  


# divide by country
eel_complete %>% count(Haplotype, country) %>%
ggplot(., aes(x = country, 
              y = n, 
              fill = Haplotype))+
 geom_bar(stat = 'identity',position = 'dodge', color = 'black', alpha = .9)+
  theme_classic()+
  theme(axis.text.x = element_text(angle = 30, 
                                   hjust = 1, 
                                   vjust = 1.15))# + facet_wrap(~country)
```

```{r}

ggplot(eel_complete, aes(x = Haplotype, 
                           y = Phenotype, 
                           fill = Haplotype))+
  geom_boxplot()+
  theme_classic()

```

```{r}

eel_complete[eel_complete$country == 'Spain',] %>% 
  ggplot(., aes(x = longitude, y = latitude, color = Haplotype))+geom_point(size = 3)+
  annotate(geom = 'text', x = -3.673333 , y = 40.499999, color = "Black", size = 4, label = 'Madrid')


# madrid is 40.499999, -3.673333, the black dot
```

```{r}
library("rnaturalearth")
library("rnaturalearthdata")

world <- ne_countries(scale = "medium", returnclass = "sf")
```

```{r}


lat_lim <-  c(min(eel_complete$latitude),max(eel_complete$latitude))
long_lim <- c(min(eel_complete$longitude),max(eel_complete$longitude)) 

ggplot(data = world) +
    geom_sf() + 
    coord_sf(xlim = long_lim, ylim = lat_lim, expand = T)+
  geom_point(data = eel_complete, aes(x = longitude , y =latitude, color = Haplotype )) + theme_minimal()



```

```{r}

eel_complete[eel_complete$country != 'US' & eel_complete$country != 'Japan' ,] -> eel_complete_noUS

lat_lim <-  c(min(eel_complete_noUS$latitude),max(eel_complete_noUS$latitude))
long_lim <- c(min(eel_complete_noUS$longitude),max(eel_complete_noUS$longitude)) 

ggplot(data = world) +
    geom_sf() + 
    coord_sf(xlim = long_lim, ylim = lat_lim, expand = T)+
  geom_point(data = eel_complete_noUS, 
             aes(x = longitude , y =latitude, color = Haplotype , shape = Haplotype, alpha = 0.9 )) + 
  theme_minimal()

```

```{r}
spain_eel_complete <- eel_complete[eel_complete$country == 'Spain',]

```

```{r}

#lat_lim <-  c(min(spain_eel_complete$latitude),max(spain_eel_complete$latitude))
#long_lim <- c(min(spain_eel_complete$longitude),max(spain_eel_complete$longitude)) 

ggplot(data = world) +
    geom_sf() + 
    coord_sf(xlim = c(-10, 3.5), ylim = c(35,44), expand = T)+
  geom_point(data = spain_eel_complete, aes(x = longitude , 
                                            y =latitude, 
                                            color = Haplotype, shape = Haplotype), size = 4) + theme_minimal()

ggplot(data = world) +
    geom_sf() + 
    coord_sf(xlim = c(-10, 3.5), ylim = c(35,44), expand = T)+
  geom_point(data = spain_eel_complete[spain_eel_complete$Haplotype == "['T']['T']['A']['T']",], 
             aes(x = longitude,
                 y =latitude),color = '#1080ff', size = 4, alpha = .7) + theme_minimal()


#43.96690002507617, -10.011695882885208     // 43.5542970129814, 3.50148718099875
```

```{r}
italy_eel_complete <- eel_complete[eel_complete$country == 'Italy',]
lat_lim <-  c(min(italy_eel_complete$latitude),max(italy_eel_complete$latitude))
long_lim <- c(min(italy_eel_complete$longitude),max(italy_eel_complete$longitude)) 

ggplot(data = world) +
    geom_sf() + 
    coord_sf(xlim = long_lim, ylim = lat_lim, expand = T)+
  geom_point(data = italy_eel_complete, aes(x = longitude , 
                                            y =latitude, 
                                            color = Haplotype, shape = Haplotype, alpha = 0.8 ), size = 3) + theme_minimal()

```

```{r}
minor_hap_eel <- eel_complete[eel_complete$Haplotype == "['T']['T']['A']['T']",]
lat_lim <-  c(min(minor_hap_eel$latitude),max(minor_hap_eel$latitude))
long_lim <- c(min(minor_hap_eel$longitude),max(minor_hap_eel$longitude)) 

ggplot(data = world) +
    geom_sf() + 
    coord_sf(xlim = long_lim, ylim = lat_lim, expand = T)+
  geom_point(data = minor_hap_eel, aes(x = longitude ,y =latitude), color = '#1080ff', size = 4, alpha = 0.7) + theme_minimal()
```

```{r}

```

```{r}

```
